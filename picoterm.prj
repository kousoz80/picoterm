<?xml version="1.0" encoding="Shift_JIS" ?>
<!-- なんちゃってXML version 0.1( ObjectEditor専用 ) -->
<xobject>
<ID>project</ID>
<x0>0</x0>
<y0>0</y0>
<width>200</width>
<height>100</height>
<ID_maker>6</ID_maker>
<objectname>picoterm</objectname>
<description>新規のアプリケーション</description>
<プロパティ>
<ID>properties</ID>
<LookandFeel>javax.swing.plaf.metal.MetalLookAndFeel</LookandFeel>
<MainWinx0>0</MainWinx0>
<MainWiny0>0</MainWiny0>
<MainWinWidth>1024</MainWinWidth>
<MainWinHeight>740</MainWinHeight>
<MesgWinx0>0</MesgWinx0>
<MesgWiny0>0</MesgWiny0>
<MesgWinWidth>1024</MesgWinWidth>
<MesgWinHeight>745</MesgWinHeight>
<FileWinx0>36</FileWinx0>
<FileWiny0>478</FileWiny0>
<FileWinWidth>578</FileWinWidth>
<FileWinHeight>262</FileWinHeight>
<EditWinx0>347</EditWinx0>
<EditWiny0>0</EditWiny0>
<EditWinWidth>676</EditWinWidth>
<EditWinHeight>541</EditWinHeight>
<PropWinx0>1</PropWinx0>
<PropWiny0>1</PropWiny0>
<PropWinWidth>615</PropWinWidth>
<PropWinHeight>448</PropWinHeight>
<DividerLocation1>2</DividerLocation1>
<DividerLocation2>2</DividerLocation2>
<ToolBarVisible>1</ToolBarVisible>
<ViewSourceAtCompile>0</ViewSourceAtCompile>
<NoSourceCreate>0</NoSourceCreate>
<JavaEditCommand>geany</JavaEditCommand>
<JavaViewCommand></JavaViewCommand>
<HelpCommand>xdg-open ./help/manual.html</HelpCommand>
<ApplicationType>6</ApplicationType>
<CompileCommand0>./compile_java</CompileCommand0>
<RunCommand0>./run_java</RunCommand0>
<GUIDesignerCommand0>java -jar guidsin.jar -java</GUIDesignerCommand0>
<ImportFiles0> import java.awt.*;
 import java.awt.event.*;
 import javax.swing.*;
 import javax.swing.event.*;
 import javax.swing.tree.*;
 import java.io.*;
 import java.net.*;
 import java.util.*;
import java.awt.geom.*;
import java.awt.print.*;
import javax.swing.border.*;
import javax.swing.filechooser.*;
 import javax.swing.*;
 import javax.swing.event.*;
 import javax.swing.tree.*;
 import java.io.*;
 import java.net.*;
 import java.util.*;
import java.awt.image.BufferedImage;
import javax.sound.sampled.*;

class Starter{
  public static void main( String args[] ){
    %AppName% ap = new %AppName%();
    ap.ARGS = args;
    ap.Start();
  }
}
</ImportFiles0>
<ProgramStartupCode0> String[] ARGS;
</ProgramStartupCode0>
<NativeHelpCommand0>                                        </NativeHelpCommand0>
<CompileCommand1></CompileCommand1>
<RunCommand1></RunCommand1>
<GUIDesignerCommand1>java -jar guidsin.jar -applet</GUIDesignerCommand1>
<ImportFiles1> import java.awt.*;
 import java.awt.event.*;
 import java.applet.*;
 import javax.swing.*;
 import javax.swing.event.*;
 import javax.swing.tree.*;
 import java.io.*;
 import java.net.*;
 import java.util.*;
 public class javatext extends Applet {
   %AppName% ap;
   public void init() {
     ap = new %AppName%();
     ap.APPLET = this;
     ap.Start();
   }
 }
</ImportFiles1>
<ProgramStartupCode1> Applet APPLET;
</ProgramStartupCode1>
<NativeHelpCommand1></NativeHelpCommand1>
<CompileCommand2></CompileCommand2>
<RunCommand2></RunCommand2>
<GUIDesignerCommand2></GUIDesignerCommand2>
<ImportFiles2>#include &lt;stdio.h&gt;

void Startup();
</ImportFiles2>
<ProgramStartupCode2>int main(){
 Startup();
 %AppName%::Start();
 }
</ProgramStartupCode2>
<NativeHelpCommand2></NativeHelpCommand2>
<CompileCommand3></CompileCommand3>
<RunCommand3></RunCommand3>
<GUIDesignerCommand3>java -jar guidsin.jar -cpp</GUIDesignerCommand3>
<ImportFiles3>#include &lt;stdio.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;math.h&gt;
#include &quot;Ekagen.h&quot;
void Startup();
</ImportFiles3>
<ProgramStartupCode3>void Emain(){
Startup();
%AppName%::Start();
}
</ProgramStartupCode3>
<NativeHelpCommand3></NativeHelpCommand3>
<MoveStep>8</MoveStep>
<ImageEditCommand>mtpaint</ImageEditCommand>
<CompilerFileName>javac.exe</CompilerFileName>
<CompileCommand4>./compile_android Test com example test</CompileCommand4>
<RunCommand4>./run_android Test com example test</RunCommand4>
<GUIDesignerCommand4>java -jar guidsin.jar -android</GUIDesignerCommand4>
<ImportFiles4>package com.example.test;

import android.os.Bundle;
import android.app.Activity;
import android.view.View;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.widget.Button;
import android.view.SurfaceHolder;
import android.view.SurfaceHolder.Callback;
import android.view.SurfaceView;
import android.widget.EditText;
import android.text.SpannableStringBuilder;
import android.text.TextWatcher;
import android.text.Editable;
import android.graphics.Matrix;
import android.graphics.Typeface;
import android.graphics.RectF;
import android.graphics.BitmapFactory;
import java.io.*;
 import java.net.*;
import java.util.*;
import java.text.SimpleDateFormat;
import android.media.MediaPlayer;
import android.os.Handler;
import android.content.res.Configuration;
import android.view.LayoutInflater;
import android.view.ViewGroup;
import android.app.Activity;
import android.graphics.Color;

import android.widget.AbsoluteLayout;
import android.widget.*;
import android.view.Gravity;
import android.view.View.OnClickListener;

import android.hardware.Camera;

public class HelloWorld extends Activity {
  public void onCreate(Bundle bundle) {
    super.onCreate(bundle);
    %AppName% ap = new %AppName%();
    ap.ACTIVITY = this;
    ap.Start();
  }
}
</ImportFiles4>
<ProgramStartupCode4>Activity ACTIVITY;
</ProgramStartupCode4>
<NativeHelpCommand4>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    package=&quot;com.example.test&quot;
    android:versionCode=&quot;1&quot;
    android:versionName=&quot;1.0&quot; &gt;

    
    
  &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot; /&gt; 
  &lt;uses-feature android:name=&quot;android.hardware.camera&quot; /&gt; 
  &lt;uses-feature android:name=&quot;android.hardware.usb.host&quot; /&gt; 
  &lt;uses-permission android:name=&quot;android.permission.RECORD_AUDIO&quot;/&gt;
  &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt; 
  &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;

  &lt;uses-sdk android:minSdkVersion=&quot;3&quot; android:targetSdkVersion=&quot;21&quot;/&gt;
  
 
    &lt;application android:label=&quot;@string/app_name&quot; &gt;
        &lt;activity
            android:name=&quot;HelloWorld&quot;
            android:label=&quot;@string/app_name&quot; &gt;
            &lt;intent-filter&gt;
                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;

                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;
            &lt;/intent-filter&gt;
        &lt;/activity&gt;
    &lt;/application&gt;

&lt;/manifest&gt;
</NativeHelpCommand4>
<HtmlEditCommand></HtmlEditCommand>
<CompileCommand5></CompileCommand5>
<RunCommand5></RunCommand5>
<GUIDesignerCommand5></GUIDesignerCommand5>
<ImportFiles5></ImportFiles5>
<ProgramStartupCode5>gosub @_PSTART
end
</ProgramStartupCode5>
<NativeHelpCommand5></NativeHelpCommand5>
<NoOptimizePin>0</NoOptimizePin>
<CompileCommand6>gcc -o picoterm test.c
echo end of compile:

</CompileCommand6>
<RunCommand6></RunCommand6>
<GUIDesignerCommand6></GUIDesignerCommand6>
<ImportFiles6>#include &lt;stdio.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;sys/ioctl.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;termios.h&gt;
#include &lt;unistd.h&gt;
</ImportFiles6>
<ProgramStartupCode6>int ARGC;
char **ARGV;
int main(int argc, char** argv){
ARGC = argc;
ARGV = argv;
_PSTART();
return 0;
}
</ProgramStartupCode6>
<NativeHelpCommand6></NativeHelpCommand6>
<IDF_LocalVariable5>\</IDF_LocalVariable5>
<IDF_LocalVariable7>\</IDF_LocalVariable7>
<CompileCommand7>orc stdio.rh test.r
java -jar asm_x64.jar asm.s test
</CompileCommand7>
<RunCommand7>./test
</RunCommand7>
<GUIDesignerCommand7></GUIDesignerCommand7>
<ImportFiles7></ImportFiles7>
<ProgramStartupCode7>main:
 _PSTART
 end
</ProgramStartupCode7>
<NativeHelpCommand7></NativeHelpCommand7>
<OpenCompileDialog>0</OpenCompileDialog>
<ScriptExecCommand>bash</ScriptExecCommand>
<RunCommand8></RunCommand8>
<CompileCommand9>
</CompileCommand9>
<RunCommand9>xdg-open test.html
</RunCommand9>
<GUIDesignerCommand9>java -jar guidsin.jar -javascript
</GUIDesignerCommand9>
<ImportFiles9></ImportFiles9>
<ProgramStartupCode9>_PSTART();
</ProgramStartupCode9>
<NativeHelpCommand9></NativeHelpCommand9>
<CompileCommand10>#!/bin/sh

iverilog test.v

if [ $? -eq 0 ]; then
  vvp a.out
fi
</CompileCommand10>
<RunCommand10>#!/bin/sh
gtkwave wave.vcd
</RunCommand10>
<GUIDesignerCommand10></GUIDesignerCommand10>
<ImportFiles10></ImportFiles10>
<ProgramStartupCode10></ProgramStartupCode10>
<NativeHelpCommand10></NativeHelpCommand10>
<BinEditCommand>mp -x</BinEditCommand>
</プロパティ>
<pin>
<ID>_PSTART</ID>
<x0>64</x0>
<y0>476</y0>
<width>55</width>
<height>24</height>
<text>Start()</text>
<px>50</px>
<py>50</py>
</pin>
<operation>
<ID>_O0</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>162</x0>
<y0>409</y0>
<width>162</width>
<height>60</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>40</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// ターミナルモード
  if(ARGC&lt;2) exit(0);


  // 現在の端末設定を取得
  if(tcgetattr(fileno(stdin), &amp;save_term) == -1){
    printf(&quot;tcgetattr failure\n&quot;);
    goto exit1;
  }
  else{
    temp_term = save_term;
  }

  // 端末設定

  // 受信したCRを無視
  temp_term.c_iflag &amp;= IGNCR;

  // カノニカルモードを外す
  temp_term.c_lflag &amp;= ~ICANON;

  // 入力をエコーしない
  temp_term.c_lflag &amp;= ~ECHO;

  // シグナルを無効化
  temp_term.c_lflag &amp;= ~ISIG;

  // 何文字受け取ったらreadが返るか
  temp_term.c_cc[VMIN] = 1;

  // 何秒経ったらreadが返るか
  temp_term.c_cc[VTIME] = 0;

  if(tcsetattr(fileno(stdin), TCSANOW, &amp;temp_term) == -1){
    printf(&quot;tcsetattr(temp_term) failure\n&quot;);
    goto exit1;
  }

  // Open modem device for reading and writing */
  fd=open(ARGV[1], O_RDWR | O_NOCTTY | O_NONBLOCK);
  if (fd &lt; 0) {printf(&quot;open error\n&quot;); return;}

  //load configuration
  tcgetattr(fd,&amp;tio);
  tio.c_cflag = BAUDRATE | CS8 | CLOCAL | CREAD;
  cfsetispeed(&amp;tio, BAUDRATE);  //set baudrate
  cfsetospeed(&amp;tio, BAUDRATE);
  tio.c_lflag &amp;= ~(ECHO | ICANON);  //non canonical, non echo back
  tio.c_cc[VMIN]=0;  //non blocking
  tio.c_cc[VTIME]=0;
  cfmakeraw(&amp;tio);  // RAWモード
  tcsetattr(fd,TCSANOW,&amp;tio);  //store configuration


  // clean the modem line and activate the settings for the port
  tcflush(fd, TCIFLUSH);
  ioctl(fd, TCSETS, &amp;tio);

printf(&quot;start picoterm:\n&quot;);

  // 送受信処理ループ
  is_run = 1;
  while(is_run) {
    do{
      len = read(fd, buf, sizeof(buf));
      if(len &gt; 0){
        write(1, buf, len);
      }
     } while(len &gt; 0);
     inbuf = getchar();
     fflush(stdin);

     // ESCコマンド
     if(inbuf==ESC){
       char c;
       printf(&quot;\n*** ESC Command ***\nu: upload program\nq: quit\ncommand? &quot;);
       c = getchar();printf(&quot;%c\n&quot;, c);
       switch(c){
       
       // プログラムのアップロード
       case &apos;u&apos;:
         printf(&quot;*** UPLOAD \&quot;main.py\&quot; ***\nfile name? &quot;);
         scanf(&quot;%s&quot;, fname); printf(&quot;%s\n&quot;, fname);
         fd0 = open(fname, O_RDONLY);
         if(fd0 == -1){
           printf(&quot;file open error\n&quot;);
         }
         else{
           *prog = &apos;\0&apos;;
           i = read(fd0, prog, MAX_PROG_SIZE);
           close(fd0);
           if(i &gt;= 0){
             write(fd, s0, strlen(s0));
             len = read(fd, buf, sizeof(buf));
             prog[i] = &apos;\0&apos;;
             for(i = 0; prog[i] != &apos;\0&apos;; i++){
               char esc = &apos;\\&apos;;
               char d0 = ((int)(prog[i] &gt;&gt; 6) &amp; 0x03) + &apos;0&apos;;
               char d1 = ((int)(prog[i] &gt;&gt; 3) &amp; 0x07) + &apos;0&apos;;
               char d2 = ((int)(prog[i] &gt;&gt; 0) &amp; 0x07) + &apos;0&apos;;
               write(fd, &amp;esc, 1);
               write(fd, &amp;d0, 1);
               write(fd, &amp;d1, 1);
               write(fd, &amp;d2, 1);
               usleep(1000);
               len = read(fd, buf, sizeof(buf));
             }
             write(fd, s1, strlen(s1));
             len = read(fd, buf, sizeof(buf));
           }
         }
         break;
         
       // 終了
       case &apos;q&apos;:
         is_run = 0;
         break;
         
       default:
         printf(&quot;unknown command.\n&quot;);
       }
       fflush(stdin);
     }

     // 通常の文字入力
     else{
       write(fd, &amp;inbuf, 1);
     if(inbuf == LF){
         inbuf=CR;
         write(fd, &amp;inbuf, 1);
       }
     }
     usleep(30000);
  }

  printf(&quot;\n*** QUIT ***\n&quot;);
  // デバイスのクローズ
  close(fd);

  // 端末設定をもとに戻す
  exit1:
  if(tcsetattr(fileno(stdin), TCSANOW, &amp;save_term) == -1){
    printf(&quot;tcsetattr(save_term) failure\n&quot;);
  }
  exit(0);
</codetext>
</operation>
<relation>
<ID>_R1</ID>
<pin1name>_PSTART</pin1name>
<pin2name>_O0</pin2name>
</relation>
<codeclip>
<ID>_C2</ID>
<x0>145</x0>
<y0>217</y0>
<width>526</width>
<height>178</height>
<codetext>// 定数・変数定義
#define MAX_PROG_SIZE 65536
#define ESC 27
#define LF   10
#define CR  13
char fname[4096], buf[4096], prog[MAX_PROG_SIZE], inbuf;
int fd, fd0, len, is_run, i;
struct termios tio, temp_term, save_term;
speed_t BAUDRATE = B9600;
char *s0 = &quot;\rprog=\&quot;&quot;;
char *s1 = &quot;\&quot;;\rf = open(\&quot;./main.py\&quot;, \&quot;w\&quot;)\rf.write(prog)\rf.close()\r&quot;;
</codetext>
</codeclip>
<codeclip>
<ID>_C3</ID>
<x0>144</x0>
<y0>27</y0>
<width>486</width>
<height>178</height>
<codetext>
// &quot;picoterm.c&quot; ラズピコ用のシンプルなプログラム開発ツール
// コンパイル：
// gcc -o picoterm picoterm.c

// 使用法：
// ./picoterm (USBシリアルデバイスファイル名)
// PCとラズピコをUSB接続して上記のコマンドを入力すると
// MicroPythonのコンソールが表示される。
// そのときにESCキーを押すとファイルのアップロード又は終了を
// 選択することができる。
 </codetext>
</codeclip>
<operation>
<ID>_O4</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>163</x0>
<y0>484</y0>
<width>301</width>
<height>78</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>57</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// コマンド実行モード
  if(ARGC&lt;4) exit(0);
  if(strcmp(ARGV[2],&quot;--command&quot;)!=0) exit(0);


  // Open modem device for reading and writing */
  fd=open(ARGV[1], O_RDWR | O_NOCTTY | O_NONBLOCK);
  if(fd &lt; 0) {printf(&quot;open error\n&quot;); return;}

  //load configuration
  tcgetattr(fd,&amp;tio);
  tio.c_cflag = BAUDRATE | CS8 | CLOCAL | CREAD;
  cfsetispeed(&amp;tio, BAUDRATE);  //set baudrate
  cfsetospeed(&amp;tio, BAUDRATE);
  tio.c_lflag &amp;= ~(ECHO | ICANON);  //non canonical, non echo back
  tio.c_cc[VMIN]=0;  //non blocking
  tio.c_cc[VTIME]=0;
  cfmakeraw(&amp;tio);  // RAWモード
  tcsetattr(fd,TCSANOW,&amp;tio);  //store configuration


  // clean the modem line and activate the settings for the port
  tcflush(fd, TCIFLUSH);
  ioctl(fd, TCSETS, &amp;tio);

  for(i = 3; i &lt; ARGC; i++){
    int j, l;
    l = strlen(ARGV[i]);
    for(j = 0; j &lt; l; j++){
      inbuf = ARGV[i][j];
      write(fd, &amp;inbuf, 1);
    }
    inbuf = &apos; &apos;;
    write(fd, &amp;inbuf, 1);
  }
  inbuf=CR;
  write(fd, &amp;inbuf, 1);

  // デバイスのクローズ
  close(fd);
  usleep(1000000);

  exit(0);
</codetext>
</operation>
<relation>
<ID>_R5</ID>
<pin1name>_PSTART</pin1name>
<pin2name>_O4</pin2name>
</relation>
</xobject>
